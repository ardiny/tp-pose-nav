/* Include the controller definition */
#include "marXbot.h"
//#include <iostream>
#include <fstream>
/* Function definitions for XML parsing */
#include <argos2/common/utility/configuration/argos_configuration.h>
/* 2D vector definition */
#include <argos2/common/utility/math/vector2.h>
#include <stdio.h>
#include <argos2/common/utility/math/angles.h>
#include <boost/algorithm/string.hpp>
#include <iostream>
#include <vector>
#include <string>
#include "Consts.h"
#include <sstream>
using namespace std;
using namespace boost;
/****************************************/
/****************************************/
marXbot::marXbot() :
   m_pcWheels(NULL),
   m_pcLEDs(NULL),
   m_pcProximity(NULL),
   m_pcCamera(NULL),
   m_act_scanner(NULL),
   m_scanner(NULL),
   m_cAlpha(10.0f),
   m_fDelta(0.5f),
   m_fWheelVelocity(2.5f),
   myfile ("footbot.txt"),
   outfile ("final.txt",ios::in),
   m_cGoStraightAngleRange(-ToRadians(m_cAlpha),
                           ToRadians(m_cAlpha)) {}
CRadians Angle;

/****************************************/
/****************************************/
int timer=0;
int uu;
int jj(0);
 string line,rr;
int k=0;
const int limits = 2;

double hist[2][360/(6*RPM/10)*24/2+1000];
const double PI = 4.0*atan(1.0);
vector <string> fields;
double MyFloat1,MyFloat2,no,posx,posy,posz1,stat1;
double worldhist[2][360/(6*RPM/10)*24/2+1];
int histcount=0,kj=0;
size_t n;
double dist=0,v=0;
int minDist;
int bestDir;
double mostProbDist=1000000;
int subj,subi;
double temp1,temp2;
bool findvalue=false;
void marXbot::Init(TConfigurationNode& t_node) {
histcount=0;
kj=0;
 dist=0,v=0;
 minDist;
 bestDir;
 mostProbDist=1000000; 
/*
    * Get sensor/actuator handles
    *
    * The passed string (ex. "footbot_wheels") corresponds to the XML tag of the device
    * whose handle we want to have. For a list of allowed values, type at the command
    * prompt:
    *
    * $ launch_argos -q actuators
    *
    * to have a list of all the possible actuators, or
    *
    * $ launch_argos -q sensors
    *
    * to have a list of all the possible sensors.
    *
    * NOTE: ARGoS creates and initializes actuators and sensors internally, on the basis of
    *       the lists provided the XML file at the <controllers><footbot_diffusion><actuators>
    *       and <controllers><footbot_diffusion><sensors> sections. If you forgot to
    *       list a device in the XML and then you request it here, an error occurs.
    */
   m_pcWheels    = dynamic_cast<CCI_FootBotWheelsActuator* >(GetRobot().GetActuator("footbot_wheels"   ));
   m_pcLEDs      = dynamic_cast<CCI_FootBotLedsActuator*   >(GetRobot().GetActuator("footbot_leds"     ));
   m_pcProximity = dynamic_cast<CCI_FootBotProximitySensor*>(GetRobot().GetSensor  ("footbot_proximity"));
   m_pcCamera = dynamic_cast<CCI_FootBotOmnidirectionalCameraSensor*>(GetRobot().GetSensor  ("footbot_omnidirectional_camera"));
   m_scanner = dynamic_cast<CCI_FootBotDistanceScannerSensor*>(GetRobot().GetSensor  ("footbot_distance_scanner"));
   m_act_scanner= dynamic_cast<CCI_FootBotDistanceScannerActuator* >(GetRobot().GetActuator("footbot_distance_scanner"));
 /*
    * Parse the XML
    *
    * The user defines this part. Here, the algorithm accepts three parameters and it's nice to
    * put them in the XML so we don't have to recompile if we want to try other settings. footbot_distance_scanner
    */
  
 m_act_scanner->Enable();
 m_act_scanner->SetRPM(RPM); 
for (int k=0;k<360/(6*RPM/10)*24/2+1000;k++){
hist[0][k]=400;
hist[1][k]=0;
};
   GetNodeAttributeOrDefault(t_node, "alpha", m_cAlpha, m_cAlpha);
   m_cGoStraightAngleRange.Set(-ToRadians(m_cAlpha), ToRadians(m_cAlpha));
   GetNodeAttributeOrDefault(t_node, "delta", m_fDelta, m_fDelta);
   GetNodeAttributeOrDefault(t_node, "velocity", m_fWheelVelocity, m_fWheelVelocity);
   const CCI_FootBotDistanceScannerSensor::TReadingsMap& tScannerRead=m_scanner->GetReadingsMap() ;
   CCI_FootBotDistanceScannerSensor::TReadingsMap::iterator ii;
   marXbot::buildgradientmap();
}
void marXbot::buildgradientmap(){
int x,y;
	for (int x = 0; x < MAP_COUNT; x++)
		for (int y = 0; y < MAP_COUNT; y++)
		{
 		map.gradientMap[x][y]=22;
		};
}
/****************************************/
/****************************************/
void marXbot::ControlStep() {
cout<<timer++<<" ";
int curX = map.mostProbX;
int curY = map.mostProbY;
int minX = -2;//std::max(curX-limits,-2);
int minY = -2;//std::max(curY-limits,-2);
int maxX = 2;//std::min(curX+limits,2);
int maxY = 2;//std::min(curY+limits,2);
const CCI_FootBotProximitySensor::TReadings& tProxReads = m_pcProximity->GetReadings();
CCI_FootBotDistanceScannerSensor::TReadingsMap tScannerRead=m_scanner->GetReadingsMap();
CCI_FootBotDistanceScannerSensor::TReadingsMap::iterator ii;
tScannerRead.size();
for(ii=tScannerRead.begin();ii!=tScannerRead.end(); ++ii){
 	//std::cout<<"f("<<jj<<")="<<(ii)->first.GetValue()*180/PI<< std::endl;   
	//std::cout<<"s("<<jj<<")="<<(ii)->second<< std::endl;
	jj++;   

	findvalue=false; 
	
 			for (int subk=0;subk<=k;subk++)
				if (abs(hist[0][subk]-((ii)->first.GetValue()*180/PI))<2){		
				//if (((ii)->second)>0){
				if (hist[1][subk]<0){

				hist[1][subk]=((ii)->second);
				//break;
				}
				/*else
				break;*/
				findvalue=true;
				break;				
				}
		        if(!findvalue)
			{
				//if(k==0){
				hist[0][k]=((ii)->first.GetValue()*180/PI);
				hist[1][k]=((ii)->second/1.0);
				k++;
				/*}else
				{

				k++;
				hist[0][k]=(int)((ii)->first.GetValue()*180/PI*10);
				hist[1][k]=(int)((ii)->second*100);
				}*/
			}
			for (int subi=0;subi<=k;subi++)
				for (int subj=subi;subj<=k;subj++)
				{
					if(hist[0][subj]<=hist[0][subi]){
					temp1=hist[0][subi];
					temp2=hist[1][subi];
					hist[0][subi]=hist[0][subj];
					hist[1][subi]=hist[1][subj];
					hist[0][subj]=temp1;
					hist[1][subj]=temp2;
					}

				}	
// --- used only in make offline map mode ----
  /* */      	// --- used only in navigation mode ----
//outfile.open("final.txt");
	//if (outfile.is_open())
//	{
		if (jj>=500/*360/(6*RPM/10)*24+2*/){		

cout<<"li"<<outfile.tellg()<<endl;
			while ( !outfile.eof() )
			{
cout<<"hhh"<<endl;
			getline (outfile,line);
			histcount=0;
			split( fields, line, is_any_of( "," ) );
					for (int n = 6; n < fields.size(); n=n+2){
		                       
					istringstream is1 (fields[n-1]);
					istringstream isno (fields[0]);
					isno >> no;
					istringstream isposx (fields[1]);
					isposx >> posx;
					istringstream isposy (fields[2]);
					isposy >> posy;
					istringstream sposz (fields[3]);
					sposz >> posz1;	
					istringstream isstat1 (fields[4]);
					isstat1 >> stat1;
					is1 >> MyFloat1;
					istringstream is2 (fields[n]);
					is2 >> MyFloat2;
						//if(abs(MyFloat1!=4000)){
						worldhist[0][histcount]=MyFloat1;
						worldhist[1][histcount]=MyFloat2;
						//cout <<worldhist[1][histcount];
						histcount++;
						/*}
						else
						break;*/
		
					}
					if((stat1==0)||(stat1==2)){//to be change 3 2
						for (int dir = 0; dir<histcount ; dir++){
							 dist = 0;

							 for (int ii = 0; ii <histcount; ii++){
							 kj = (ii + dir) % histcount;
							v = (worldhist[1][ii])-hist[1][ii];
							if((worldhist[1][kj]<0)&&(hist[1][ii]<0))
							v=0;
							if((worldhist[1][kj]<0))
							v=-hist[1][ii];
							if((hist[1][ii]<0))
							v=worldhist[1][kj];
							 dist+=(v*v);
							 } 
							
				if ((dist<minDist)||(dir==0)){
							minDist = (dist);
							bestDir = dir;
							};

						} 
				map.probMap[map.coni2x(posx)][map.conj2y(posy)]=minDist;
						
				       		if (((minDist<mostProbDist)&&(((posx>minX)&&(posy>minY)&&(posx<maxX)&&(posy<maxY))))||((posx==0)&&(posy==0))){
						mostProbDist = minDist;
						map.mostProbX = posx;
						map.mostProbY = posy;
						map.mostProbDir = bestDir;
cout<<"tr";
						}
					}
				
				map.gradientMap[map.coni2x(posx)][map.conj2y(posy)]=stat1;
				cout<<map.coni2x(posx)<<"=="<<map.conj2y(posy)<<"=="<<map.probMap[map.coni2x(posx)][map.conj2y(posy)]<<endl;			
			}
		cout<<"X="<<map.mostProbX<<"Y="<<map.mostProbY<<"dir"<<mostProbDist<<endl;

		break;
               // outfile.close();
		}
//	}	
//	else cout << "Unable to open file";
}
if (timer>50)
{
timer=0;
jj=0;
outfile.clear();
outfile.seekg(0, ios::beg);
TConfigurationNode t_node;
CFootBotDiffusion::Init(t_node);
m_pcWheels->SetLinearVelocity(0.0f, 0.0f);
}
if (timer>3){
m_pcWheels->SetLinearVelocity(-200.0f, -200.0f);

}
}

}

/****************************************/
/****************************************/

/*
 * This statement notifies ARGoS of the existence of the controller.
 * It binds the class passed as first argument to the string passed as second argument.
 * The string is then usable in the XML configuration file to refer to this controller.
 * When ARGoS reads that string in the XML file, it knows which controller class to instantiate.
 * See also the XML configuration files for an example of how this is used.
 */
REGISTER_CONTROLLER(marXbot, "marXbot_controller")
